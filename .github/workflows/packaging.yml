name: Packaging
on:
  push:
    branches:
      - master
      - devel
      - 'release-**'
      - 'feature-008-debian'
    tags:
      - 'v*'
jobs:
  debian:
    name: Debian package
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y git-buildpackage build-essential equivs
          cd ~
      - name: Set env
        run: |
          echo "LAST_COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "LAST_COMMIT_DATE=$(git log -1 --date=format:%Y%m%d --format=%cd)" >> $GITHUB_ENV
          echo "KALKUN_VERSION=$(grep kalkun_version application/config/kalkun_settings.php | cut -d "'" -f 4)" >> $GITHUB_ENV
          echo "DEBEMAIL=none@domain.tld" >> $GITHUB_ENV
          echo "DEBFULLNAME='Github Actions Deb Builder for Kalkun'" >> $GITHUB_ENV
      - name: Build dependencies
        run: |
          set -x
          # get the packages from debian salsa servers as they have not entered Debian yet

          mkdir -p ~/deps
          cd ~/deps
          gbp clone https://salsa.debian.org/php-team/pear/php-codeigniter-framework
          gbp clone https://salsa.debian.org/php-team/pear/php-datto-json-rpc
          gbp clone https://salsa.debian.org/php-team/pear/php-datto-json-rpc-http
          gbp clone https://salsa.debian.org/php-team/pear/php-giggsey-locale
          gbp clone https://salsa.debian.org/php-team/pear/php-giggsey-libphonenumber
          gbp clone https://salsa.debian.org/php-team/pear/php-kissifrot-php-ixr
          gbp clone https://salsa.debian.org/php-team/pear/php-league-csv
          gbp clone https://salsa.debian.org/bastif/sphinxcontrib-phpdomain

          # First build php-giggsey-locale because it is a dependency to build php-giggsey-libphonenumber
          cd php-giggsey-locale ; \
          mk-build-deps --install --remove --root-cmd sudo --tool='apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends --yes' debian/control ; \
          rm -f $(dpkg-parsechangelog -S Source)-build-deps_* ; \
          gbp export-orig ; \
          dpkg-buildpackage -d ; \
          cd ~/deps ; \
          # Install php-giggsey-locale
          sudo apt-get install ./php-giggsey-locale*.deb

          # Build sphinxcontrib-phpdomain (required by php-codeigniter-framework)
          cd sphinxcontrib-phpdomain ; \
          mk-build-deps --install --remove --root-cmd sudo --tool='apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends --yes' debian/control ; \
          rm -f $(dpkg-parsechangelog -S Source)-build-deps_* ; \
          gbp export-orig ; \
          dpkg-buildpackage -d ; \
          cd ~/deps ; \
          # Install python3-sphinxcontrib.phpdomain
          sudo apt-get install ./python3-sphinxcontrib.phpdomain*.deb

          for dir in $(find -type d -maxdepth 1 -mindepth 1); do \
            cd $dir; \
            mk-build-deps --install --remove --root-cmd sudo --tool='apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends --yes' debian/control ; \
            rm -f $(dpkg-parsechangelog -S Source)-build-deps_* ; \
            gbp export-orig ; \
            dpkg-buildpackage -d ; \
            cd ~/deps ; \
          done
      - name: Build kalkun packages
        run: |
          set -x

          # Download the only the debian folder from debian salsa servers to be able to build kalkun
          # This adds only the debian folder to $GITHUB_REF_NAME to be able to build the packages
          git remote add debian https://salsa.debian.org/bastif/kalkun.git
          git fetch debian
          git checkout -b debian_branch debian/debian/latest
          git checkout $GITHUB_REF_NAME
          git checkout debian_branch -- debian
          git status

          if [[ "$(git tag --points-at ${GIT_BRANCH})" != "" ]]; then \
            KALKUN_VERSION="$(git tag --points-at ${GIT_BRANCH} | sed "s/^v//")" ; \
            DEB_VERSION=$(echo ${KALKUN_VERSION} | sed -e "s/-/~/g")-1 ; \
            rm debian/changelog
            dch --package kalkun --newversion="$DEB_VERSION" --create $DEB_VERSION ; \
            gbp export-orig --no-pristine-tar --upstream-tag=$(git tag --points-at ${GIT_BRANCH}) --compression=xz ; \
          else \
            DEB_VERSION=$(echo $KALKUN_VERSION | sed -e "s/-/~/g")~${LAST_COMMIT_DATE} ; \
            gbp dch --new-version="$DEB_VERSION" --snapshot --ignore-branch ; \
            # Append debian version to version number ; \
            sed -i -e "1s/)/-1)/" debian/changelog ; \
            gbp export-orig --no-pristine-tar --upstream-tree=BRANCH --upstream-branch=$(git rev-parse --abbrev-ref HEAD) --compression=xz ; \
          fi

          dpkg-buildpackage -d
      - name: Copy source & binary packages, and dependencies
        if: always()
        run: |
          set -x
          mkdir -p ~/Kalkun_${GITHUB_REF_NAME}_debianBundle
          dcmd mv ../*.changes ~/Kalkun_${GITHUB_REF_NAME}_debianBundle
          cp ~/deps/*.deb ~/Kalkun_${GITHUB_REF_NAME}_debianBundle
          cd ~ && tar -cvf Kalkun_${GITHUB_REF_NAME}_debianBundle.tar Kalkun_${GITHUB_REF_NAME}_debianBundle
          echo "my_home=$HOME" >> $GITHUB_ENV
      - name: Archive artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Debian packages (source & binary)
          path: ~/Kalkun_${{ github.ref_name }}_debianBundle/*
          if-no-files-found: ignore
      - name: Archive artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Debian packages (source & binary) tarball
          path: ~/Kalkun_${{ github.ref_name }}_debianBundle.tar
          if-no-files-found: ignore

  required_php_versions:
    name: Get PHP versions to pack for
    runs-on: ubuntu-latest
    outputs:
      php_versions: ${{ steps.php_ver_step.outputs.PHP_VERSIONS }}
      php_versions_matrix: ${{ steps.php_ver_step.outputs.PHP_VERSIONS_matrix }}
    steps:
      - name: Install required packages
        run: |
          if ! command -v jq; then sudo apt-get update && sudo apt-get install -y jq; fi
      - name: Build PHP_VERSIONS array & PHP_VERSIONS_matrix
        id: php_ver_step
        run: |
          set -x

          # Set array that will store the PHP versions for which we create a package.
          PHP_VERSIONS=()

          # Start with 7.4.30 since this is for the DEMO we publish on sourceforge.
          PHP_VERSIONS+=("7.4.30")

          # Get all released php versions above 5.6 (in the format X.Y)
          for upstream_ver in $(curl https://www.php.net/releases/?json | jq -r '.[].version' | cut -f -2 -d .); do
            major=$(cut -f 1 -d . <<< "$upstream_ver")
            for minor in {0..20}; do
              if dpkg --compare-versions ${major}.$minor le $upstream_ver &&  dpkg --compare-versions ${major}.$minor ge 5.6; then
                PHP_VERSIONS+=("${major}.$minor")
              fi
            done
          done

          PHP_VERSIONS_matrix=$(sed 's/\ /", "/g' <<<  [\"${PHP_VERSIONS[*]}\"])

          echo "PHP_VERSIONS=${PHP_VERSIONS[*]}" >> "$GITHUB_OUTPUT"
          echo "PHP_VERSIONS_matrix=$PHP_VERSIONS_matrix" >> "$GITHUB_OUTPUT"

          echo "PHP_VERSIONS=${PHP_VERSIONS[*]}"
          echo "PHP_VERSIONS_matrix=$PHP_VERSIONS_matrix"

  prebuilt:
    name: Prebuild packages by PHP version
    needs: [ required_php_versions ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Composer (php-actions)
        uses: php-actions/composer@v6
        with:
            dev: no
            php_version: "7.4"
            php_extensions: ctype curl hash intl json mbstring session
      - name: Build prebuilt packages with Composer dependencies
        env:
          PHP_VERSIONS: ${{needs.required_php_versions.outputs.php_versions}}
        run: |
          set -x

          git fetch --prune --unshallow --tags

          for version in $PHP_VERSIONS; do
            ./utils/build_single_dist.sh "$version"
          done

          ls dist
      - name: Archive artifacts (all prebuilt packages)
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Prebuilt packages (all)
          path: 'dist/'
          if-no-files-found: ignore

  individual_artifacts:
    name: Create artifacts for ${{ matrix.version }}
    needs: [ prebuilt, required_php_versions ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        #version: ["5.6", "7.0", "7.4.30"]
        version: ${{fromJson(needs.required_php_versions.outputs.php_versions_matrix)}}
    steps:
      - name: Download artifact of 'prebuilt packages'
        if: always()
        uses: actions/download-artifact@v3
        with:
          name: Prebuilt packages (all)
          path: 'dist/'
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: 'dist'
      - name: Archive artifacts for ${{ matrix.version }}
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Prebuilt package for PHP ${{ matrix.version }}
          path: 'dist/*forPHP${{ matrix.version }}.[tz]*'
          if-no-files-found: ignore

  release:
    name: Create release and add packages
    needs: [ prebuilt, debian ]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact of 'prebuilt packages'
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/download-artifact@v3
        with:
          name: Prebuilt packages (all)
          path: 'dist/'
      - name: Download artifact of 'Debian packages'
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/download-artifact@v3
        with:
          name: Debian packages (source & binary) tarball
          path: 'dist/'
      - name: Display structure of downloaded files
        if: startsWith(github.ref, 'refs/tags/')
        run: ls -R
        working-directory: 'dist'
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          fail_on_unmatched_files: true
          files: |
            dist/*

  delete_artifacts:
    needs: [ individual_artifacts, release ]
    name: Delete temporary artifact
    runs-on: ubuntu-latest
    steps:
      - uses: geekyeggo/delete-artifact@v2
        with:
          name: Prebuilt packages (all)
          failOnError: false
      - uses: geekyeggo/delete-artifact@v2
        with:
          name: Debian packages (source & binary) tarball
          failOnError: false
